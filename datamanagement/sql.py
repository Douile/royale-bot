from postgres import Postgres
import traceback

class Table:
    def __init__(self,name,if_not_exists=False):
        self.name = name
        self.if_not_exists = if_not_exists
        self.columns = []
    def add_column(self, name, type='int', unique=False, not_null=False, primary_key=False,generate=False):
        self.columns.append(Column(name,type,unique,not_null,primary_key,generate))
    @property
    def column_names(self):
        names = []
        for column in self.columns:
            names.append(column.name)
        return names
    def __str__(self):
        if len(self.columns) > 0:
            string = " ("
            for column in self.columns:
                string += column.named() + ","
            if string.endswith(","):
                string = string[0:-1]
            string += ")"
        return string
    def create(self):
        string = "CREATE TABLE"
        if self.if_not_exists:
            string += " IF NOT EXISTS"
        string += " "+self.name
        string += str(self)
        return string
    def alter(self):
        string = "ALTER TABLE IF EXISTS "+self.name
        for column in self.columns:
            string += " ADD COLUMN IF NOT EXISTS "
            string += column.named()
            string += ","
            string += " ALTER COLUMN "
            string += column.name + " SET DATA TYPE "
            string += column.type
            string += ","
            # string += " ALTER COLUMN "+column.name
            # if column.generate:
            #     string += " ADD GENERATED BY DEFAULT AS IDENTITY"
            # else:
            #     string += " DROP IDENTITY IF EXISTS"
            # string += ","

        if string.endswith(","):
            string = string[0:-1]
        return string


class Column:
    def __init__(self, name, type='int', unique=False, not_null=False, primary_key=False, generate=False):
        self.name = name
        self.type = type
        self.unique = unique
        self.not_null = not_null
        self.primary_key = primary_key
        self.generate = generate
    def __str__(self):
        string = " "+self.type
        if self.unique:
            string += " UNIQUE"
        if self.not_null:
            string += " NOT NULL"
        if self.primary_key:
            string += " PRIMARY KEY"
        if self.generate:
            string += " GENERATED BY DEFAULT AS IDENTITY"
        return string
    def named(self):
        return self.name+str(self)

class ServerData(Table):
    def __init__(self):
        super().__init__("server_data",True)
        self.add_column("_id",type="int",primary_key=True,generate=True)
        self.add_column("server_id",type="text",unique=True,not_null=True)
        self.add_column("server_name",type="text")
        self.add_column("last_help_msg",type="text")
        self.add_column("last_help_channel",type="text")
        self.add_column("last_status_msg",type="text")
        self.add_column("last_status_channel",type="text")
        self.add_column("next_shop",type="int")
        self.add_column("latest_shop",type="text")
        self.add_column("prefix",type="text")
class ServerBackgrounds(Table):
    def __init__(self):
        super().__init__("server_backgrounds",True)
        self.add_column("_id",type="int",primary_key=True,generate=True)
        self.add_column("server_id",type="text",not_null=True)
        self.add_column('background_type',type='text')
        self.add_column("background_url",type="text")
class ServerChannels(Table):
    def __init__(self):
        super().__init__("server_channels",True)
        self.add_column("_id",type="int",primary_key=True,generate=True)
        self.add_column("server_id",type="text",not_null=True)
        self.add_column("channel_type",type="text",not_null=True)
        self.add_column("channel_id",type="text")
class Cache(Table):
    def __init__(self):
        super().__init__("cache_data",True)
        self.add_column("_id",type="int",primary_key=True,generate=True)
        self.add_column("type",type="text",not_null=True)
        self.add_column("value",type="text")
class Links(Table):
    def __init__(self):
        super().__init__("user_links",True)
        self.add_column('_id',type='int',primary_key=True,generate=True)
        self.add_column('user_id',type='text',unique=True)
        self.add_column('user_nickname',type='text')

class Database(Postgres):
    def __init__(self,defaults=False,*,url):
        super().__init__(url)
        if defaults:
            self.setup_defaults()
    def setup_defaults(self):
        self.run_unsafe(ServerData().create())
        self.run_unsafe(ServerData().alter())
        self.run_unsafe(ServerBackgrounds().create())
        self.run_unsafe(ServerBackgrounds().alter())
        self.run_unsafe(ServerChannels().create())
        self.run_unsafe(ServerChannels().alter())
        self.run_unsafe(Cache().create())
        self.run_unsafe(Cache().alter())
        self.run_unsafe(Links().create())
        self.run_unsafe(Links().alter())
    def run_unsafe(self,*args):
        try:
            self.run(*args)
        except:
            traceback.print_exc()

    # server info
    def servers(self):
        info = self.all("SELECT server_id FROM server_data",back_as=dict)
        server_ids = []
        for server in info:
            server_ids.append(server)
        return server_ids
    def server_info(self,serverid,backgrounds=False,channels=False):
        info = self.one("SELECT * FROM server_data WHERE server_id=%(id)s",
            parameters={'id': serverid},
            back_as=dict,
            default=None)
        if info == None:
            info = {}
        if backgrounds:
            backgrounds_data = self.all("SELECT background_type,background_url FROM server_backgrounds WHERE server_id=%(id)s",
            parameters={'id':serverid},
            back_as=dict)
            info['backgrounds'] = {}
            for background in backgrounds_data:
                type = background['background_type']
                if info['backgrounds'].get(type,None) == None:
                    info['backgrounds'][type] = [background['background_url']]
                else:
                    info['backgrounds'][type].append(background['background_url'])
        if channels:
            channels_data = self.all("SELECT * FROM server_channels WHERE server_id=%(id)s",
            parameters={'id':serverid},
            back_as=dict)
            info['channels'] = {}
            for channel in channels_data:
                info['channels'][channel['channel_type']] = channel['channel_id']
        return info
    def set_server_info(self,server_id,**kwargs):
        print("set_server_info: server_id: {server_id}, server_name: {server_name}, last_help_msg: {last_help_msg}, last_help_channel: {last_help_channel}, next_shop: {next_shop}, latest_shop: {latest_shop}, prefix: {prefix}, last_status_msg: {last_status_msg}, last_status_channel: {last_status_channel}".format_map(ArgMap(kwargs)))
        if not self.is_server(server_id):
            self.run("INSERT INTO server_data (server_id) VALUES (%(id)s)",parameters={'id':server_id})
        cols = ServerData().column_names
        for arg in kwargs:
            if arg in cols:
                if kwargs.get(arg,None) != None:
                    self.set_server_info_string(server_id, arg, kwargs.get(arg))
    def set_server_info_string(self,server_id,column,value):
        self.set_server_info_raw(server_id,column,value,"s")
    def set_server_info_int(self,server_id,column,value):
        self.set_server_info_raw(server_id,column,value,"s")
    def set_server_info_raw(self,server_id,column,value,type="s"):
        self.run("UPDATE server_data SET {}=%(value){} WHERE server_id=%(id)s".format(column,type),parameters={'id':server_id,'value':value})
    def is_server(self,server_id):
        data = self.one("SELECT _id FROM server_data WHERE server_id=%(id)s",parameters={'id':server_id},default=None)
        exists = False
        if data == None:
            exists = False
        else:
            exists = True
        return exists
    def delete_server(self,server_id):
        self.run("DELETE FROM server_data WHERE server_id=%(id)s",parameters={'id':server_id})

    # server backgrounds
    def add_server_background(self,server_id,background_url=None,type=None):
        self.run("INSERT INTO server_backgrounds (server_id,background_type,background_url) VALUES (%(id)s,%(type)s,%(url)s)",parameters={'id':server_id,'url':background_url,'type':type})
    def reset_server_backgrounds(self,server_id,type=None):
        if type == None:
            self.run("DELETE FROM server_backgrounds WHERE server_id=%(id)s",parameters={'id':server_id})
        else:
            self.run("DELETE FROM server_backgrounds WHERE server_id=%(id)s AND background_type=%(type)s",parameters={'id':server_id,'type':type})
    def set_server_backgrounds(self,server_id,backgrounds=[],type=None):
        self.reset_server_backgrounds(server_id,type)
        for background in backgrounds:
            self.add_server_background(server_id,background,type)

    # server channels
    def set_server_channel(self,server_id,channel_type,channel_id=None):
        if channel_id == None:
            if self.is_server_channel(server_id,channel_type):
                self.run("DELETE FROM server_channels WHERE server_id=%(id)s AND channel_type=%(type)s",parameters={'id':server_id,'type':channel_type})
        else:
            if self.is_server_channel(server_id,channel_type):
                self.run("UPDATE server_channels SET channel_id=%(channel)s WHERE server_id=%(id)s AND channel_type=%(type)s",parameters={'id':server_id,'channel':channel_id,'type':channel_type})
            else:
                self.run("INSERT INTO server_channels (server_id,channel_type,channel_id) VALUES (%(id)s,%(type)s,%(channel)s)",parameters={'id':server_id,'type':channel_type,'channel':channel_id})
    def is_server_channel(self,server_id,channel_type):
        data = self.one("SELECT _id FROM server_channels WHERE server_id=%(id)s AND channel_type=%(type)s",parameters={'id':server_id,'type':channel_type},default=None)
        exists = False
        if data == None:
            exists = False
        else:
            exists = True
        return exists

    # cache data
    def get_cache(self,type,once=False):
        info = self.all("SELECT type,value FROM cache_data WHERE type=%(type)s",parameters={'type':type},back_as=dict)
        if once:
            cache = {}
            for data in info:
                cache[data['type']] = data['value']
        else:
            cache = []
            for data in info:
                cache.append(data['value'])
        return cache
    def set_cache(self,type,value,once=False):
        params = {'value':value,'type':type}
        if once:
            if self.is_cache(type):
                self.run("UPDATE cache_data SET value=%(value)s WHERE type=%(type)s",parameters=params)
            else:
                self.run("INSERT INTO cache_data (type,value) VALUES (%(type)s,%(value)s)",parameters=params)
        else:
            self.run("INSERT INTO cache_data (type,value) VALUES (%(type)s,%(value)s)",parameters=params)
    def is_cache(self,type):
        info = self.all("SELECT _id FROM cache_data WHERE type=%(type)s",parameters={'type':type})
        if len(info) > 0:
            exists = True
        else:
            exists = False
        return exists


    # links
    def get_link(self,user_id):
        data = self.all("SELECT * FROM user_links WHERE user_id=%(id)s",parameters={'id':user_id},back_as=dict)
        if len(data) > 1:
            user_data = data[0]
            for i in range(1,len(data)):
                self.run("DELETE FROM user_links WHERE _id=%(_id)s",parameters={'_id':user_data[i]['_id']})
        elif len(data) == 1:
            user_data = data[0]
        else:
            user_data = None
        print('Got link {}: {}'.format(user_id,user_data))
        return user_data
    def set_link(self,user_id,user_nick):
        print('Setting link {} {}'.format(user_id,user_nick))
        self.run('INSERT INTO user_links (user_id,user_nickname) VALUES (%(id)s,%(nick)s) ON CONFLICT (user_id)\
        DO UPDATE SET user_nickname = %(nick)s',parameters={'id':user_id,'nick':user_nick})
    def delete_link(self,user_id):
        print('Deleting link {}'.format(user_id))
        self.run('DELETE FROM user_links WHERE user_id=%(id)s',parameters={'id':user_id})


class ArgMap(dict):
    def __missing__(self, key):
        return None
